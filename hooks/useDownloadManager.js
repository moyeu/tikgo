import { useState } from 'react';
import { fetchAndDownload } from '../utils/fetchBlob';
import { fallbackDownload } from '../utils/proxyFallback';

/**
 * Qu·∫£n l√Ω t·∫£i video qua Blob:
 * 1Ô∏è‚É£ G·ªçi /api/down?media=<b64>&bandwidth_saving=1  ‚ûú 302 ‚ûú CDN
 * 2Ô∏è‚É£ N·∫øu CDN tr·∫£ l·ªói/CORS ‚ûú fallbackDownload (proxy)
 * 3Ô∏è‚É£ File > 1 GB c≈©ng ƒëi th·∫≥ng proxy ƒë·ªÉ tr√°nh timeout d√†i
 */
export default function useDownloadManager(userRegion, userIP) {
  const [progress, setProgress] = useState(0);
  const [cancelDownload, setCancelDownload] = useState(null);

  const handleVideoDownload = (media) => {
    const { url: videoUrl, format, size } = media;
    const randomNumber = Math.floor(Math.random() * (100000000 - 1000000) + 1000000);
    const fileName = `tikgo.me-${randomNumber}.${format}`;

    // Kh√¥ng c√≥ IP / region ‚Üí b√°o l·ªói
    if (!userRegion || !userIP) {
      alert('‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i!');
      return;
    }

    // File l·ªõn > 1 GB: proxy ngay
    if (size && size > 1024 * 1024 * 1024) {
      fallbackDownload(videoUrl, fileName, size, format, setProgress, userRegion, userIP);
      return;
    }

    /* üöÄ URL redirect ti·∫øt ki·ªám bƒÉng th√¥ng */
    const encoded     = btoa(videoUrl); // base64-url
    const redirectUrl = `/api/down?media=${encoded}&bandwidth_saving=1`;

    try {
      const cancel = fetchAndDownload(
        redirectUrl,
        fileName,
        size,
        setProgress,
        userRegion,
        /* onEarlyFail: chuy·ªÉn sang proxy n·∫øu 302 theo CDN v·∫´n l·ªói */
        () => fallbackDownload(videoUrl, fileName, size, format, setProgress, userRegion, userIP)
      );

      if (cancel) setCancelDownload(() => cancel);
    } catch (err) {
      // B·∫•t k·ª≥ l·ªói n√†o kh√°c ‚Üí d√πng proxy
      fallbackDownload(videoUrl, fileName, size, format, setProgress, userRegion, userIP);
    }
  };

  return { progress, handleVideoDownload, cancelDownload };
}
